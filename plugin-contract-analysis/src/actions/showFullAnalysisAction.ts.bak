import {
    Action,
    IAgentRuntime,
    Memory,
    State,
    HandlerCallback,
    elizaLogger,
    ServiceType,
} from "@ai16z/eliza";
import { ContractAnalysisService } from "../services/contractAnalysisService";

export const showFullAnalysisAction: Action = {
    name: "SHOW_FULL_ANALYSIS",
    similes: [
        "show analysis",
        "full breakdown",
        "detailed analysis",
        "more info",
    ],
    description: "Shows the full contract analysis when requested",
    validate: async (runtime: IAgentRuntime, message: Memory) => {
        const analysisService = runtime.getService<ContractAnalysisService>(
            ServiceType.CONTRACT_ANALYSIS
        );
        if (!analysisService) return false;

        const text = message.content.text.toLowerCase();
        const requestingDetails =
            text.includes("full") ||
            text.includes("detailed") ||
            text.includes("breakdown") ||
            text.includes("show") ||
            text.includes("more");

        if (!requestingDetails) return false;

        const recentAnalysis = await analysisService.getRecentAnalysis(
            message.roomId
        );
        return recentAnalysis !== null;
    },
    handler: async (
        runtime: IAgentRuntime,
        message: Memory,
        state?: State,
        options?: any,
        callback?: HandlerCallback
    ) => {
        try {
            const analysisService = runtime.getService<ContractAnalysisService>(
                ServiceType.CONTRACT_ANALYSIS
            );

            if (!analysisService) {
                return false;
            }

            const recentAnalysis = await analysisService.getRecentAnalysis(
                message.roomId
            );
            if (!recentAnalysis) {
                return false;
            }

            // Provide the full analysis to the agent via callback
            if (callback) {
                await callback(
                    {
                        text: recentAnalysis.formattedAnalysis,
                        data: {
                            safety: recentAnalysis.safety,
                            contractAddress: recentAnalysis.contractAddress,
                            analysis: recentAnalysis.formattedAnalysis,
                            timestamp: recentAnalysis.timestamp,
                        },
                    },
                    []
                );
            }

            return true;
        } catch (error) {
            elizaLogger.error("[ShowFullAnalysis] Error", {
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
                roomId: message.roomId,
                messageId: message.id,
            });
            return false;
        }
    },
    examples: [
        [
            {
                user: "User",
                content: { text: "Can you show me the full analysis?" },
            },
            {
                user: "Agent",
                content: {
                    text: "Here's the detailed breakdown of the contract analysis...",
                    action: "SHOW_FULL_ANALYSIS",
                },
            },
        ],
    ],
};
